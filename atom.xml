<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>莫北的个人博客</title>
  
  <subtitle>莫北</subtitle>
  <link href="https://mobei1006.github.io/atom.xml" rel="self"/>
  
  <link href="https://mobei1006.github.io/"/>
  <updated>2024-12-11T14:14:38.940Z</updated>
  <id>https://mobei1006.github.io/</id>
  
  <author>
    <name>莫北</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring_cloud_alibaba快速上手</title>
    <link href="https://mobei1006.github.io/2024/12/11/spring-cloud-alibaba%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>https://mobei1006.github.io/2024/12/11/spring-cloud-alibaba%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2024-12-11T13:49:44.000Z</published>
    <updated>2024-12-11T14:14:38.940Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本教程是参考b站上图灵课程fox老师的spring cloud alibaba的课程，视频的参考链接如下：</p><ul><li>视频：<a href="https://www.bilibili.com/video/BV1jUiqYaEsZ/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1jUiqYaEsZ/?spm_id_from=333.337.search-card.all.click</a></li><li>代码：<a href="https://gitee.com/dongchenglin/vip_springcloud_alibaba_2024">https://gitee.com/dongchenglin/vip_springcloud_alibaba_2024</a></li></ul><h4 id="项目的快速搭建"><a href="#项目的快速搭建" class="headerlink" title="项目的快速搭建"></a>项目的快速搭建</h4><p>这里可以利用git直接把gitee上的项目拷贝到本地，然后可以利用分支和标签的切换来回到一些基础的版本</p><img src="https://raw.githubusercontent.com/mobei1006/ImageHome/master/images/image-20241211213632548.png" alt="image-20241211213632548" style="zoom:50%;" /><p>通过分支切换可以得到一个初始的版本，利用这个版本可以自己根据视频来不断完善学习。</p><img src="https://raw.githubusercontent.com/mobei1006/ImageHome/master/images/image-20241211213823460.png" alt="image-20241211213823460" style="zoom:50%;" /><img src="https://raw.githubusercontent.com/mobei1006/ImageHome/master/images/image-20241211214015013.png" alt="image-20241211214015013" style="zoom:50%;" /><p>我们可以看到主要有以下几个模块：</p><ul><li>账户服务</li><li>订单服务</li><li>库存服务</li><li>common库</li><li>前端服务</li></ul><h4 id="服务的注册和发现-Nacos"><a href="#服务的注册和发现-Nacos" class="headerlink" title="服务的注册和发现 Nacos"></a>服务的注册和发现 Nacos</h4><p>首先需要明白的是我们服务之间都是单独部署的，比如账户服务和订单服务，都一个一个完整的springboot项目。但是我们在微服务架构下这些服务之间是有调用关系的。所以我们首先需要考虑如何去进行服务之间的调用。</p><h5 id="利用API完成调用"><a href="#利用API完成调用" class="headerlink" title="利用API完成调用"></a>利用API完成调用</h5><p>最简单的方式就是使用<strong>http请求</strong>，通过发送请求来获取对应服务的资源。那么springboot其实可以利用API <code>restTemplate</code>来完成</p><p>第一步，我们需要将restTemplate引入到springboot中，作为一个Bean，让我们可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步将Bean注入到Bean工厂中，让我们可以调用他</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">  RestTemplate restTemplate;</span><br></pre></td></tr></table></figure><p>那业务逻辑就可以修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="comment">//@GlobalTransactional</span></span><br><span class="line">   <span class="keyword">public</span> Result&lt;?&gt; createOrder(String userId, String commodityCode, Integer count) &#123;</span><br><span class="line">       <span class="comment">// deduct storage</span></span><br><span class="line">       <span class="type">StorageDTO</span> <span class="variable">storageDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StorageDTO</span>();</span><br><span class="line">       storageDTO.setCommodityCode(commodityCode);</span><br><span class="line">       storageDTO.setCount(count);</span><br><span class="line">       <span class="comment">//RestTemplate远程调用</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">storage_url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8010/storage/reduce-stock&quot;</span>;</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">storageCode</span> <span class="operator">=</span> restTemplate.postForObject(storage_url,storageDTO, Result.class).getCode();</span><br><span class="line">       <span class="keyword">if</span> (storageCode.equals(COMMON_FAILED.getCode())) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;stock not enough&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// deduct balance</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> count * <span class="number">2</span>;</span><br><span class="line">       <span class="type">AccountDTO</span> <span class="variable">accountDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountDTO</span>();</span><br><span class="line">       accountDTO.setUserId(userId);</span><br><span class="line">       accountDTO.setPrice(price);</span><br><span class="line">       <span class="comment">//RestTemplate远程调用</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">account_url</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8020/account/reduce-balance&quot;</span>;</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">accountCode</span> <span class="operator">=</span> restTemplate.postForObject(account_url,accountDTO,Result.class).getCode();</span><br><span class="line">       <span class="keyword">if</span> (accountCode.equals(COMMON_FAILED.getCode())) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;balance not enough&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// save order</span></span><br><span class="line">       <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">       order.setUserId(userId);</span><br><span class="line">       order.setCommodityCode(commodityCode);</span><br><span class="line">       order.setCount(count);</span><br><span class="line">       order.setMoney(price);</span><br><span class="line">       order.setCreateTime(<span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis()));</span><br><span class="line">       order.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis()));</span><br><span class="line">       orderMapper.saveOrder(order);</span><br><span class="line">       logger.info(<span class="string">&quot;[createOrder] orderId: &#123;&#125;&quot;</span>, order.getId());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> Result.success(order);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里主要利用<code>restTemplate.postForObject</code>，将请求的地址和参数传入来发送http请求，拿到对应的返回值。这样就可以完成两个服务之间的调用。</p><p><strong>问题：</strong>这种方法虽然可以完成服务之间的调用，但是存在一些问题。比如我们在代码里的url其实是写死的，如果我们有多个库存服务，那么我们需要进行判断调用具体哪一个库存服务。所以这种方法是不太可行的。</p><h5 id="利用Nacos来完成调用"><a href="#利用Nacos来完成调用" class="headerlink" title="利用Nacos来完成调用"></a>利用Nacos来完成调用</h5><p>Nacos的作用是用于服务的注册与发现，我们可以将服务注册到Nacos上，那么其他服务就可以发现已经注册的服务，获取这些服务的地址，就可以完成服务的调用</p><p>利用Nacos来进行服务注册与发现，首先需要引入相应的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后修改配置文件，增加对Nacos的配置。这里需要对每一个服务进行类似的配置，不多记录</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tlmall-order-01</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">tlmall-nacos-server:8848</span></span><br><span class="line">    <span class="attr">loadbalancer:</span></span><br><span class="line">      <span class="attr">nacos:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这里多加了一个loadbalance配置，其实也就是一个自带的负载均衡策略</p><p>然后可以在我们的启动文件上加上相应的注解，<code>@EnableDiscoveryClient</code> 注解也可以不加，因为默认是开启的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TlmallOrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(TlmallOrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新修改<code>RestTemplate</code>的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改相应的业务代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//@GlobalTransactional</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; createOrder(String userId, String commodityCode, Integer count) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//logger.info(&quot;[createOrder] current XID: &#123;&#125;&quot;, RootContext.getXID());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// deduct storage</span></span><br><span class="line">        <span class="type">StorageDTO</span> <span class="variable">storageDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StorageDTO</span>();</span><br><span class="line">        storageDTO.setCommodityCode(commodityCode);</span><br><span class="line">        storageDTO.setCount(count);</span><br><span class="line">        <span class="comment">//RestTemplate远程调用</span></span><br><span class="line">        <span class="comment">//String storage_url = &quot;http://localhost:8010/storage/reduce-stock&quot;;</span></span><br><span class="line">        <span class="comment">//整合了Nacos+LoadBalaner,可以使用微服务名tlmall-storage代替localhost:8020</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">storage_url</span> <span class="operator">=</span> <span class="string">&quot;http://tlmall-storage/storage/reduce-stock&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">storageCode</span> <span class="operator">=</span> restTemplate.postForObject(storage_url,storageDTO, Result.class).getCode();</span><br><span class="line">        <span class="keyword">if</span> (storageCode.equals(COMMON_FAILED.getCode())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;stock not enough&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// deduct balance</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">price</span> <span class="operator">=</span> count * <span class="number">2</span>;</span><br><span class="line">        <span class="type">AccountDTO</span> <span class="variable">accountDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccountDTO</span>();</span><br><span class="line">        accountDTO.setUserId(userId);</span><br><span class="line">        accountDTO.setPrice(price);</span><br><span class="line">        <span class="comment">//RestTemplate远程调用</span></span><br><span class="line">        <span class="comment">//String account_url = &quot;http://localhost:8020/account/reduce-balance&quot;;</span></span><br><span class="line">        <span class="comment">//整合了Nacos+LoadBalaner,可以使用微服务名tlmall-account代替localhost:8020</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">account_url</span> <span class="operator">=</span> <span class="string">&quot;http://tlmall-account/account/reduce-balance&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">accountCode</span> <span class="operator">=</span> restTemplate.postForObject(account_url,accountDTO,Result.class).getCode();</span><br><span class="line">        <span class="keyword">if</span> (accountCode.equals(COMMON_FAILED.getCode())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(<span class="string">&quot;balance not enough&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// save order</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUserId(userId);</span><br><span class="line">        order.setCommodityCode(commodityCode);</span><br><span class="line">        order.setCount(count);</span><br><span class="line">        order.setMoney(price);</span><br><span class="line">        order.setCreateTime(<span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis()));</span><br><span class="line">        order.setUpdateTime(<span class="keyword">new</span> <span class="title class_">Timestamp</span>(System.currentTimeMillis()));</span><br><span class="line">        orderMapper.saveOrder(order);</span><br><span class="line">        logger.info(<span class="string">&quot;[createOrder] orderId: &#123;&#125;&quot;</span>, order.getId());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.success(order);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里直接利用对应服务在配置文件中的名称就可以进行发送请求，不用写死的url，增加了灵活性。并且，在有多个服务的情况下，Nacos可以根据具体的负载均衡策略来选择合适的服务进行调用。</p><p><strong>问题：</strong>虽然利用Nacos解决了url的调用问题，但是基于<code>RestTemplate</code>的方法还是比较麻烦， 我们想要的是像调用本地方法一样调用其他服务的资源。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;本教程是参考b站上图灵课程fox老师的spring cloud alibaba的课程，视频的参考链接如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视频：</summary>
      
    
    
    
    <category term="Java" scheme="https://mobei1006.github.io/categories/Java/"/>
    
    
    <category term="Spring Cloud" scheme="https://mobei1006.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>LockSupport学习</title>
    <link href="https://mobei1006.github.io/2024/12/03/LockSupport%E5%AD%A6%E4%B9%A0/"/>
    <id>https://mobei1006.github.io/2024/12/03/LockSupport%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-12-03T12:22:56.000Z</published>
    <updated>2024-12-11T14:25:04.665Z</updated>
    
    <content type="html"><![CDATA[<h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>LockSupport 主要是用来创建锁和其他同步类的基本线程阻塞语句，他有两个主要方法 park 和 unpark。park 和 unpark 的原理是对 volatile 变量 <code>**&lt;font style=&quot;color:#AE146E;&quot;&gt;_counter&lt;/font&gt;**</code>的操作。park 是将 _counter 变量修改为 0，unpark 是将_counter 变量修改为 1. 如果修改之前就是 1，那么可以抵消一次 park。比如先调一次 unpark，然后调用 park 是不能阻塞的，和 wait、notify 不同。在 linux 下实现是通过具体的互斥锁相关方法。</p><p>在 park 中还有一个 重载方法是带<font style="color:rgb(44, 62, 80);">blocker 字段的，为什么需要这个字段呢：blocker 可以理解为阻塞对象，主要用于问题的排查和系统的监控。在 Java5 之前，当线程阻塞在一个对象上的时候，通过线程 dump 能够查看这个线程的对象，方便问题的定位，但是 Java 5 推出 Lock 等开发工具的时候，可能遗漏了这一点，所以在 Java 6 中新增了这个方法。这里是如何将阻塞对象设置到线程中的呢，主要是通过 Unsafe 类和地址偏移量来做的。LockSupport 中有静态变量 Unsafe 和实例对象在内存地址上的偏移量。那么可以操作内存地址上的偏移量来进行设置</font></p><h2 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h2><p> LockSupport用来创建锁和其他同步类的基本线程阻塞原语。简而言之，当调用LockSupport.park时，表示当前线程将会等待，直至获得许可，当调用LockSupport.unpark时，必须把等待获得许可的线程作为参数进行传递，好让此线程继续运行</p><h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockSupport</span> &#123;</span><br><span class="line">    <span class="comment">// Hotspot implementation via intrinsics API</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">U</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">PARKBLOCKER</span></span><br><span class="line">        <span class="operator">=</span> U.objectFieldOffset(Thread.class, <span class="string">&quot;parkBlocker&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">TID</span></span><br><span class="line">        <span class="operator">=</span> U.objectFieldOffset(Thread.class, <span class="string">&quot;tid&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UNSAFE字段表示sun.misc.Unsafe类，查看其源码，点击在这里，一般程序中不允许直接调用，而long型的表示**<font style="color:#07787E;">实例对象相应字段在内存中的偏移地址</font>**，可以通过该偏移地址获取或者设置该字段的值</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>只有一个私有的构造函数，无法被实例化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 私有构造函数，无法被实例化</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">LockSupport</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="核心函数分析"><a href="#核心函数分析" class="headerlink" title="核心函数分析"></a>核心函数分析</h3><p>在分析LockSupport函数之前，先引入sun.misc.Unsafe类中的park和unpark函数，因为LockSupport的核心函数都是基于Unsafe类中定义的park和unpark函数，下面给出两个函数的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">(<span class="type">boolean</span> isAbsolute, <span class="type">long</span> time)</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Thread thread)</span>;</span><br></pre></td></tr></table></figure><ul><li>park函数，阻塞线程，并且该线程在下列情况发生之前都会被阻塞: ① 调用unpark函数，释放该线程的许可。② 该线程被中断。③ 设置的时间到了。并且，当time为绝对时间时，isAbsolute为true，否则，isAbsolute为false。当time为0时，表示无限等待，直到unpark发生。</li><li>unpark函数，释放线程的许可，即激活调用park后阻塞的线程。这个函数不是安全的，调用这个函数时要确保线程依旧存活</li></ul><p>这是 JVM 中的方法，源码是 cpp 实现的。线程的阻塞和唤醒其实是与<code>&lt;font style=&quot;background-color:rgb(255, 245, 245);&quot;&gt;hotspot.share.runtime&lt;/font&gt;</code>中的<code>&lt;font style=&quot;background-color:rgb(255, 245, 245);&quot;&gt;Parker类&lt;/font&gt;</code>相关，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parker</span> : <span class="keyword">public</span> os::PlatformParker &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">volatile</span> <span class="type">int</span> _counter ;<span class="comment">//该变量非常重要，下文我们会具体描述</span></span><br><span class="line"> <span class="comment">//省略部分代码</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  ~Parker() &#123; ShouldNotReachHere(); &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// For simplicity of interface with Java, all forms of park (indefinite,</span></span><br><span class="line">  <span class="comment">// relative, and absolute) are multiplexed into one call.</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">park</span><span class="params">(bool isAbsolute, jlong time)</span>;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">()</span>;</span><br><span class="line">  <span class="comment">//省略部分代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里**<font style="color:#AE146E;">使用 volatile 修饰的 int 变量</font><strong><code>**&lt;font style=&quot;color:#AE146E;&quot;&gt;_counter&lt;/font&gt;**</code></strong><font style="color:#AE146E;">非常重要</font>**。因为 Java 是跨平台的，所以不同操作系统会有不同的实现，下面我们看一下 Linux 系统</p><h4 id="Linux-下的-park"><a href="#Linux-下的-park" class="headerlink" title="Linux 下的 park"></a>Linux 下的 park</h4><p>具体的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Parker::park(bool isAbsolute, jlong time) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//(1)如果_counter的值大于0，那么直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (Atomic::xchg(<span class="number">0</span>, &amp;_counter) &gt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//获取当前线程</span></span><br><span class="line">  Thread* thread = Thread::current();</span><br><span class="line">  JavaThread *jt = (JavaThread *)thread;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//(2)如果当前线程已经中断，直接返回。</span></span><br><span class="line">  <span class="keyword">if</span> (Thread::is_interrupted(thread, <span class="literal">false</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//(3)判断时间，如果时间小于0，或者在绝对时间情况下，时间为0直接返回</span></span><br><span class="line">  struct timespec absTime;</span><br><span class="line">  <span class="keyword">if</span> (time &lt; <span class="number">0</span> || (isAbsolute &amp;&amp; time == <span class="number">0</span>)) &#123; <span class="comment">// don&#x27;t wait at all</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果时间大于0，判断阻塞超时时间或阻塞截止日期，同时将时间赋值给absTime</span></span><br><span class="line">  <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    to_abstime(&amp;absTime, time, isAbsolute);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//(4)如果当前线程已经中断，或者申请互斥锁失败，则直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (Thread::is_interrupted(thread, <span class="literal">false</span>) ||</span><br><span class="line">      pthread_mutex_trylock(_mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//(5)如果是时间等于0,那么就直接阻塞线程，</span></span><br><span class="line">  <span class="keyword">if</span> (time == <span class="number">0</span>) &#123;</span><br><span class="line">    _cur_index = REL_INDEX; <span class="comment">// arbitrary choice when not timed</span></span><br><span class="line">    status = pthread_cond_wait(&amp;_cond[_cur_index], _mutex);</span><br><span class="line">    assert_status(status == <span class="number">0</span>, status, <span class="string">&quot;cond_timedwait&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//(6)根据absTime之前计算的时间，阻塞线程相应时间</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    _cur_index = isAbsolute ? ABS_INDEX : REL_INDEX;</span><br><span class="line">    status = pthread_cond_timedwait(&amp;_cond[_cur_index], _mutex, &amp;absTime);</span><br><span class="line">    assert_status(status == <span class="number">0</span> || status == ETIMEDOUT,</span><br><span class="line">                  status, <span class="string">&quot;cond_timedwait&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//省略部分代码</span></span><br><span class="line">  <span class="comment">//(7)当线程阻塞超时，或者到达截止日期时，直接唤醒线程  </span></span><br><span class="line">  _counter = <span class="number">0</span>;</span><br><span class="line">  status = pthread_mutex_unlock(_mutex);</span><br><span class="line"></span><br><span class="line"> <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结一下上面的步骤：</p><ol><li><strong><font style="color:#ED740C;">调用</font></strong><code>**&lt;font style=&quot;color:#ED740C;background-color:rgb(255, 245, 245);&quot;&gt;Atomic::xchg&lt;/font&gt;**</code><strong><font style="color:#ED740C;">方法，将</font></strong><code>**&lt;font style=&quot;color:#ED740C;background-color:rgb(255, 245, 245);&quot;&gt;_counter&lt;/font&gt;**</code><strong><font style="color:#ED740C;">的值赋值为0，其方法的返回值为</font></strong><code>**&lt;font style=&quot;color:#ED740C;background-color:rgb(255, 245, 245);&quot;&gt;之前_counter的值&lt;/font&gt;**</code><strong><font style="color:#ED740C;">，如果返回值</font></strong><code>**&lt;font style=&quot;color:#ED740C;background-color:rgb(255, 245, 245);&quot;&gt;大于0&lt;/font&gt;**</code><strong><font style="color:#ED740C;">（因为有其他线程操作过_counter的值，也就是其他线程调用过</font></strong><code>**&lt;font style=&quot;color:#ED740C;background-color:rgb(255, 245, 245);&quot;&gt;unPark&lt;/font&gt;**</code><strong><font style="color:#ED740C;">方法)，那么就直接返回</font>****<font style="color:#601BDE;">【这里如果在调用 park 之前，调用了 unpark，那么这次的 park 是阻塞不了的，unpark 在之前将</font></strong><code>**&lt;font style=&quot;color:#601BDE;background-color:rgb(255, 245, 245);&quot;&gt;_counter&lt;/font&gt;**</code><strong><font style="color:#601BDE;background-color:rgb(255, 245, 245);">者只为了 1，所以阻塞不了，但是这个时候</font></strong><code>**&lt;font style=&quot;color:#601BDE;background-color:rgb(255, 245, 245);&quot;&gt;_counter&lt;/font&gt;**</code><strong><font style="color:#601BDE;background-color:rgb(255, 245, 245);">修改为了 0，如果还有 park 就可以阻塞了，因为返回是 0</font>****<font style="color:#601BDE;">】</font></strong></li><li>如果当前线程已经中断，直接返回。也就是说如果当前线程已经中断了，那么调用park()方法来阻塞线程就会无效</li><li>判断其设置的时间是否合理，如果合理，判断<code>&lt;font style=&quot;background-color:rgb(255, 245, 245);&quot;&gt;阻塞超时时间&lt;/font&gt;</code>或<code>&lt;font style=&quot;background-color:rgb(255, 245, 245);&quot;&gt;阻塞截止日期&lt;/font&gt;</code>，同时将时间赋值给<code>&lt;font style=&quot;background-color:rgb(255, 245, 245);&quot;&gt;absTime&lt;/font&gt;</code></li><li>在实际对线程进行阻塞前，再一次判断如果当前线程已经中断，或者申请互斥锁失败，则直接返回</li><li>如果是时间等于0（时间为0，表示一直阻塞线程，除非调用unPark方法唤醒），那么就直接阻塞线程</li><li>根据absTime之前计算的时间，并调用<code>&lt;font style=&quot;background-color:rgb(255, 245, 245);&quot;&gt;pthread_cond_timedwait&lt;/font&gt;</code>方法阻塞线程相应的时间</li><li>当线程阻塞相应时间后，通过<code>&lt;font style=&quot;background-color:rgb(255, 245, 245);&quot;&gt;pthread_mutex_unlock&lt;/font&gt;</code>方法直接唤醒线程,同时将<code>&lt;font style=&quot;background-color:rgb(255, 245, 245);&quot;&gt;_counter&lt;/font&gt;</code>赋值为0</li></ol><p><strong><font style="color:#601BDE;">其实除了判断条件，就是对</font></strong><code>**&lt;font style=&quot;color:#601BDE;background-color:rgb(255, 245, 245);&quot;&gt;_counter&lt;/font&gt;**</code><strong><font style="color:#601BDE;background-color:rgb(255, 245, 245);">操作，上面的阻塞线程和唤醒线程 等操作都是 Linux 的内部函数</font></strong></p><h4 id="Linux-下的-unpark"><a href="#Linux-下的-unpark" class="headerlink" title="Linux 下的 unpark"></a><font style="background-color:rgb(255, 245, 245);">Linux 下的 unpark</font></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Parker::unpark() &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> pthread_mutex_lock(_mutex);</span><br><span class="line">  assert_status(status == <span class="number">0</span>, status, <span class="string">&quot;invariant&quot;</span>);</span><br><span class="line">  const <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> _counter;</span><br><span class="line">  <span class="comment">//将_counter的值赋值为1</span></span><br><span class="line">  _counter = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// must capture correct index before unlocking</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> _cur_index;</span><br><span class="line">  status = pthread_mutex_unlock(_mutex);</span><br><span class="line">  assert_status(status == <span class="number">0</span>, status, <span class="string">&quot;invariant&quot;</span>);</span><br><span class="line">  <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实从代码整体逻辑来讲，最终唤醒其线程的方法为<code>pthread_mutex_unlock(_mutex)</code>（关于该函数的作用，我已经在上表进行介绍了。大家可以参照Linux下的park实现中的图表进行理解）。同时将<code>_counter的值赋值为1</code>, 那么结合我们上文所讲的park(将线程进行阻塞)方法，那么我们可以得知整个线程的唤醒与阻塞，在Linux系统下，**<font style="color:#601BDE;">其实是受到</font>**<code>**&lt;font style=&quot;color:#601BDE;&quot;&gt;Parker类中的_counter的值的影响的&lt;/font&gt;**</code></p><h4 id="Java-中的-park-函数"><a href="#Java-中的-park-函数" class="headerlink" title="Java 中的 park 函数"></a>Java 中的 park 函数</h4><p><font style="color:rgb(44, 62, 80);">park函数有两个重载版本，方法摘要如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">()</span>；</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">(Object blocker)</span>；</span><br></pre></td></tr></table></figure><p><font style="color:rgb(44, 62, 80);">两个函数的区别在于park()函数有没有blocker，即没有设置线程的parkBlocker字段。park(Object)型函数如下。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">(Object blocker)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        setBlocker(t, blocker);</span><br><span class="line">        U.park(<span class="literal">false</span>, <span class="number">0L</span>);</span><br><span class="line">        setBlocker(t, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(44, 62, 80);">调用park函数时，首先获取当前线程，然后设置当前线程的parkBlocker字段，即调用setBlocker函数，之后调用Unsafe类的park函数，之后再调用setBlocker函数。</font></p><p><strong><font style="color:rgb(44, 62, 80);">这里为什么调用两次setBlocker： </font></strong><font style="color:rgb(44, 62, 80);">调用park函数时，当前线程首先设置好parkBlocker字段，然后再调用Unsafe的park函数，此后，当前线程就已经阻塞了，等待该线程的unpark函数被调用，所以后面的一个setBlocker函数无法运行，unpark函数被调用，该线程获得许可后，就可以继续运行了，也就运行第二个setBlocker，把该线程的parkBlocker字段设置为null，这样就完成了整个park函数的逻辑。如果没有第二个setBlocker，那么之后没有调用park(Object blocker)，而直接调用getBlocker函数，得到的还是前一个park(Object blocker)设置的blocker，显然是不符合逻辑的。</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setBlocker</span><span class="params">(Thread t, Object arg)</span> &#123;</span><br><span class="line">        U.putReferenceOpaque(t, PARKBLOCKER, arg);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><font style="color:rgb(44, 62, 80);">另外一个无参重载版本，park()函数如下：</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">park</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取许可，设置时间为无限长，直到可以获取许可</span></span><br><span class="line">    UNSAFE.park(<span class="literal">false</span>, <span class="number">0L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="blocker-是什么"><a href="#blocker-是什么" class="headerlink" title="blocker 是什么"></a>blocker 是什么</h5><p><strong><font style="color:#601BDE;">blocker 是用来标识当前线程的等待对象，可以叫做阻塞对象。他的作用主要是用于问题的排查和系统的监控</font></strong></p><p><font style="color:#2F4BDA;">由于在Java 5之前，当线程阻塞时（使用synchronized关键字）在一个对象上时，通过线程dump能够查看到该线程的阻塞对象。方便问题定位，而Java 5退出的Lock等并发工具却遗漏了这一点，致使在线程dump时无法提供阻塞对象的信息。因此，在Java 6中，LockSupport新增了含有阻塞对象的park方法。用以替代原有的park方法</font></p><p><strong>这里还有个问题</strong>：既然线程被阻塞了，那么通过什么方法将阻塞对象设置到线程中呢。这里**<font style="color:#2F4BDA;">实际上是通过直接操控线程存储该字段的内存区域来实现的。</font>**</p><p><font style="color:#2F4BDA;">在 JVM 中可以自由的选择 Java 对象布局，也就是 Java 对象的各个部分存放在内存的那个地方，JVM 是可以感知的。 在sun.misc.Unsafe中提供了</font><code>&lt;font style=&quot;color:#2F4BDA;&quot;&gt;objectFieldOffset()&lt;/font&gt;</code><font style="color:#2F4BDA;">方法用于获取某个字段相对 Java对象的“起始地址”的偏移量，也提供了getInt、getLong、getObject之类的方法可以使用前面获取的偏移量来访问某个Java 对象的某个字段</font></p><p><img src="https://raw.githubusercontent.com/mobei1006/ImageHome/master/images/1726452349005-bc4c545b-3f35-4430-b946-a8297d7a5f4f.png"></p><p>在上图中，我们创建了两个Thread对象，其中Thread对象1在内存中分配的地址为<code>0x10000-0x10100</code>,Thread对象2在内存中分配的地址为<code>0x11000-0x11100</code>,其中<code>parkBlocker</code>对应内存偏移量为2（这里我们假设相对于其对象的“起始位置”的偏移量为2）。那么通过<code>objectFieldOffset(Field f)</code>就能获取该字段的偏移量。**<font style="color:#ED740C;">需要注意的是</font><strong><code>**&lt;font style=&quot;color:#ED740C;&quot;&gt;某字段在其类中的内存偏移量总是相同的&lt;/font&gt;**</code></strong><font style="color:#ED740C;">，也就是对于Thread对象1与Thread对象2，parkBlocker字段在其对象所在的内存偏移量始终是相同的</font>**</p><p>这里也就可以解释了，我们之前的为什么要两次调用setBlocker 方法，也就是为了后面 get 道德 blocker 不是之前设置的，防止干扰</p><h4 id="Java-中-unpark-函数"><a href="#Java-中-unpark-函数" class="headerlink" title="Java 中 unpark 函数"></a>Java 中 unpark 函数</h4><p> 如果给定线程的许可尚不可用，则使其可用。如果线程在 park 上受阻塞，则它将解除其阻塞状态。否则，保证下一次调用 park 不会受阻塞。如果给定线程尚未启动，则无法保证此操作有任何效果。具体函数如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unpark</span><span class="params">(Thread thread)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (thread != <span class="literal">null</span>)</span><br><span class="line">            U.unpark(thread);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="通知等待机制"><a href="#通知等待机制" class="headerlink" title="通知等待机制"></a>通知等待机制</h3><p>这个可以使用 JDK 的 wait&#x2F;notify 实现，也可以使用 park&#x2F;unpark 实现。但是  wait&#x2F;notify 中入股先调用 notify 在调用 wait，那么线程是会被阻塞的。但是 park&#x2F;unpark 中，先调用 unpark 在调用 park，是不会被阻塞的，原因在上面，所以使用park&#x2F;unpark 更加的灵活</p><p>LockSupport.park() 实际上只负责阻塞当前的线程，释放锁资源实际上是在<strong>Condition的await()方法中实现的</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;总结一下&quot;&gt;&lt;a href=&quot;#总结一下&quot; class=&quot;headerlink&quot; title=&quot;总结一下&quot;&gt;&lt;/a&gt;总结一下&lt;/h3&gt;&lt;p&gt;LockSupport 主要是用来创建锁和其他同步类的基本线程阻塞语句，他有两个主要方法 park 和 unpark。par</summary>
      
    
    
    
    <category term="Java并发" scheme="https://mobei1006.github.io/categories/Java%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="Java" scheme="https://mobei1006.github.io/tags/Java/"/>
    
    <category term="并发" scheme="https://mobei1006.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
</feed>
